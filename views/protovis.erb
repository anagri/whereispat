<script type="text/javascript" src="/js/libs/protovis.min.js"></script>
<script type="text/javascript+protovis">
	var height = 200;
	var width = 940;
	
	var elevationService = new google.maps.ElevationService();
	var locations = new Array();
	<% @past_locations.each {|location_data| %>
		locations.push(new google.maps.LatLng(<%= location_data[:lat] %>,<%= location_data[:long] %>));
	<% } %>
	
	var positionalRequest = {'locations': locations};
	
	var elevations = new Array();
	
	elevationService.getElevationForLocations(positionalRequest,function(results, status) {
		if (status == google.maps.ElevationStatus.OK) {
			elevations = results;
		}
		});

	distanceScale = pv.Scale.linear(0, <%= @total_distance.round %>).range(0, width);
	timeScale = pv.Scale.linear(0, <%= @total_time.round %>).range(0, width);
	speedScale = pv.Scale.linear(0,20).range(0,height);

	var speeds = new Array();
	
	var distance_time_speeds_array = new Array();
	<% @distance_time_speeds.each{|data_point| %>
		distance_time_speeds_array.push({	culmulative_distance_in_kilometers:<%= data_point[:culmulative_distance_in_kilometers]%>,
											distance_in_kilometers: <%=data_point[:distance_in_kilometers]%>,
											culmulative_time_in_hours: <%=data_point[:culmulative_time_in_hours]%>,
											time_diff_in_hours:<%=data_point[:time_diff_in_hours]%>,
											speed_in_kph:<%=data_point[:speed_in_kph]%>
										});
	<% } %>



	var vis = new pv.Panel().canvas('graph')
		.height(height)
		.width(width)
		.bottom(40)
		.left(20)
		.right(10)
		.top(5);
	
	//This line plots speed over time - where time is correctly spread along the x axis
	vis.add(pv.Line)
		.data(distance_time_speeds_array)
		.left(function(d){  var value = d.culmulative_time_in_hours;
							var scaledValue = timeScale(value);
							return scaledValue;
						})
		.bottom(function(d){var value = d.speed_in_kph;
							var scaledValue = speedScale(value);
							return scaledValue;})
		.lineWidth(2).add(pv.Dot);
	
	/* Y axis */
	vis.add(pv.Rule)
		.data(speedScale.ticks(10))
		.bottom(speedScale)
		//.strokeStyle(function(d) d ? "#eee" : "#000")
		.anchor("left").add(pv.Label)
		.text(speedScale.tickFormat);
		
	/* X-axis and ticks. */
	vis.add(pv.Rule)
		.data(timeScale.ticks(10))
		//.visible(function(d) d)
		.left(timeScale)
		.bottom(-5)
		.height(5)
		.anchor("bottom").add(pv.Label)
		.text(timeScale.tickFormat);	
	
	//vis.add(pv.Label).text("Avg. Speed in kph").left(5).bottom(height-30);
	//vis.add(pv.Label).text("Time in hours").left(width / 2).bottom(-30);
	
	/*vis.add(pv.Line)
		.height(height)
		.width(width)
		.data(distance_time_speeds_array)
		.left(function(d){  var value = d.culmulative_distance_in_kilometers;
							var scaledValue = distanceScale(value);
							console.log(""+this.index+" - "+value+" -> "+scaledValue);
							return scaledValue;
						})
		.bottom(function(d){console.log(d.speed_in_kph);return  d.speed_in_kph})
		.lineWidth(2);*/
	
	vis.render();

</script>